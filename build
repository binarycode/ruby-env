#!/usr/bin/env bash

set -Eeuo pipefail

readonly WD="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

readonly IMAGE="$(bash "${WD}/image" "$@")"
readonly IMAGE_VERSION=$(echo -n "${IMAGE}" | cut -d':' -f2)

readonly USAGE='
Usage: build [-j] RUBY_VERSION
  -j
    use debian jessie as parent (buster by default)
'

readonly RUBY_INSTALL_VERSION='0.7.0'

build_container=''
build_mount=''
main_container=''
main_mount=''

trap cleanup EXIT INT TERM

cleanup() {
  echo 'Cleanup...'
  remove_container "${build_container}" "${build_mount}"
  remove_container "${main_container}" "${main_mount}"
}

remove_container() {
  local -r container="$1"
  local -r mount="$2"
  [[ -z "${container}" ]] && return
  if [[ -n "${mount}" ]]; then
    buildah unmount "${container}" || true
  fi
  buildah rm "${container}" || true
}

echo_usage_and_exit() {
  echo "${USAGE}"
  exit
}

check_ruby_version() {
  local -r version="$1"
  [[ -n "${version}" ]] && return
  error 'RUBY_VERSION is empty'
  exit 1
}

check_image_presence() {
  [[ $(buildah images --format='{{.Name}}:{{.Tag}}' | grep -c "^localhost/${IMAGE}$") -eq 0 ]] && return
  echo "Image ${IMAGE} is already built"
  exit
}

error() {
  echo "$@" >&2
}

create_and_mount_container() {
  local -n container="$1"
  local -n mount="$2"
  local -r image="debian:$3"
  container=$(buildah from "${image}")
  mount=$(buildah mount "${container}")
}

build_ruby() {
  local -r ruby_version="$1"
  local options='set -Eeuo pipefail'
  [[ -n "${DEBUG:-}" ]] && options='set -Eeuxo pipefail'
  buildah run "${build_container}" bash -c "
    ${options}
    DEBIAN_FRONTEND=noninteractive apt-get -qq update
    DEBIAN_FRONTEND=noninteractive apt-get -qq install -y --no-install-recommends \
      build-essential \
      ca-certificates \
      wget
    cd /tmp
    wget -O ruby-install-${RUBY_INSTALL_VERSION}.tar.gz https://github.com/postmodern/ruby-install/archive/v${RUBY_INSTALL_VERSION}.tar.gz
    tar -xzvf ruby-install-${RUBY_INSTALL_VERSION}.tar.gz
    mv /tmp/ruby-install-${RUBY_INSTALL_VERSION} /tmp/ruby-install
    # prevent ruby documentation generation
    echo 'gem: --no-document' > /root/.gemrc
    /tmp/ruby-install/bin/ruby-install --system ruby ${ruby_version} -- --disable-install-doc
    DEBIAN_FRONTEND=noninteractive apt-get -qq purge -y \
      build-essential \
      ca-certificates \
      wget
    DEBIAN_FRONTEND=noninteractive apt-get -qq autoremove
    rm -rf /usr/local/src
  "
}

copy_ruby() {
  cp -r "${build_mount}/lib/"* "${main_mount}/lib/"
  cp -r "${build_mount}/usr/"* "${main_mount}/usr/"
  cp "${build_mount}/root/.gemrc" "${main_mount}/root/"
}

configure_image_metadata() {
  buildah config --author 'Igor Sidorov <igor.sidorov@binarycode.ru>' "${main_container}"
  buildah config --label "version=${IMAGE_VERSION}" "${main_container}"
}

commit_container() {
  buildah commit "${main_container}" "${IMAGE}"
}

main() {
  [[ -n "${DEBUG:-}" ]] && set -x;

  local debian_version='buster'

  while getopts ':j' opt; do
    case "${opt}" in
      j) debian_version='jessie';;
      *) echo_usage_and_exit;;
    esac
  done
  shift "$((OPTIND-1))"

  local -r ruby_version="${1:-}"
  check_ruby_version "${ruby_version}"

  check_image_presence

  echo 'Creating containers...'
  create_and_mount_container build_container build_mount "${debian_version}"
  create_and_mount_container main_container main_mount "${debian_version}"

  echo 'Building ruby...'
  build_ruby "${ruby_version}"

  echo 'Copying ruby...'
  copy_ruby

  echo 'Creating image...'
  configure_image_metadata
  commit_container
}

main "$@"
