#!/usr/bin/env bash

set -Eeuo pipefail

USAGE='
Usage: build [-j] [-n] [-v] RUBY_VERSION
  -j
    use debian jessie as parent (buster by default)

  -n
    show image name

  -v
    verbose mode
'

readonly RUBY_INSTALL_VERSION='0.7.0'

build_container=''
build_container_mount=''
main_container=''
main_container_mount=''

trap cleanup EXIT INT TERM

cleanup() {
  remove_container "${build_container}" || true
  unmount_container "${build_container}" "${build_container_mount}" || true
  remove_container "${main_container}" || true
  unmount_container "${main_container}" "${main_container_mount}" || true
}

remove_container() {
  local -r container="$1"
  [[ -z "${container}" ]] && return
  buildah rm "${container}"
}

unmount_container() {
  local -r container="$1"
  local -r mount="$2"
  [[ -z "${container}" ]] && return
  if [[ -n "${mount}" ]]; then
    buildah unmount "${container}" || true
  fi
}

echo_usage_and_exit() {
  echo "${USAGE}"
  exit 0
}

verify_ruby_version_is_present() {
  local -r version="$1"
  [[ -n "${version}" ]] && return
  error 'RUBY_VERSION is empty'
  exit 1
}

error() {
  echo "$@" >&2
}

generate_tag() {
  local -r debian_version="$1"
  local -r image_version=$(git describe --tags --abbrev=0 | sed 's/^v//')
  echo "${image_version}-${debian_version}"
}

generate_image_name() {
  local -r ruby_version="$1"
  local -r tag="$2"
  echo "ruby-${ruby_version}:${tag}"
}

echo_image_name_and_exit_if_requested() {
  local -r requested="$1"
  local -r name="$2"
  [[ -z "${requested}" ]] && return
  echo -n "${name}"
  exit 0
}

exit_if_image_exists() {
  local -r name="$1"
  [[ $(buildah images --format='{{.Name}}:{{.Tag}}' | grep -c "^localhost/${name}$") -eq 0 ]] && return
  echo "Image ${name} is already built"
  exit 0
}

create_container() {
  local -r image="$1"
  buildah from "${image}"
}

install_dependencies() {
  local -r container="$1"
  # shellcheck disable=SC1004
  buildah run "${container}" bash -c '
    set -Eeuxo pipefail
    DEBIAN_FRONTEND=noninteractive apt-get -qq update
    DEBIAN_FRONTEND=noninteractive apt-get -qq install -y --no-install-recommends \
      build-essential \
      ca-certificates \
      wget
  '
}

install_ruby_install() {
  local -r container="$1"
  local -r version="$2"
  buildah run "${container}" bash -c "
    set -Eeuxo pipefail
    cd /tmp
    wget -O ruby-install-${version}.tar.gz https://github.com/postmodern/ruby-install/archive/v${version}.tar.gz
    tar -xzvf ruby-install-${version}.tar.gz
    mv /tmp/ruby-install-${version} /tmp/ruby-install
  "
}

prevent_ruby_documentation_generation() {
  local -r container="$1"
  buildah run "${container}" bash -c '
    set -Eeuxo pipefail
    echo "gem: --no-document" > /root/.gemrc
  '
}

install_ruby() {
  local -r container="$1"
  local -r version="$2"
  buildah run "${container}" bash -c "
    set -Eeuxo pipefail
    /tmp/ruby-install/bin/ruby-install --system ruby ${version} -- --disable-install-doc
  "
}

remove_dependencies() {
  local -r container="$1"
  # shellcheck disable=SC1004
  buildah run "${container}" bash -c '
    set -Eeuxo pipefail
    DEBIAN_FRONTEND=noninteractive apt-get -qq purge -y \
      build-essential \
      ca-certificates \
      wget
    DEBIAN_FRONTEND=noninteractive apt-get -qq autoremove
    rm -rf /usr/local/src
  '
}

mount_container() {
  local -r container="$1"
  buildah mount "${container}"
}

copy_ruby() {
  local -r from="$1"
  local -r to="$2"
  cp -r "${from}/lib/"* "${to}/lib/"
  cp -r "${from}/usr/"* "${to}/usr/"
  cp "${from}/root/.gemrc" "${to}/root/"
}

configure_image_metadata() {
  local -r container="$1"
  local -r version="$2"
  buildah config --author 'Igor Sidorov <igor.sidorov@binarycode.ru>' "${container}"
  buildah config --label "version=${version}" "${container}"
}

commit_container() {
  local -r container="$1"
  local -r name="$2"
  buildah commit "${container}" "${name}"
}

main() {
  local debian_version='buster'
  local show_image_name=''
  while getopts ':jnv' opt; do
    case "${opt}" in
      j) debian_version='jessie';;
      n) show_image_name=true;;
      v) set -xv;;
      *) echo_usage_and_exit;;
    esac
  done
  shift "$((OPTIND-1))"
  local -r ruby_version="${1:-}"
  local -r parent_image="debian:${debian_version}"

  verify_ruby_version_is_present "${ruby_version}"
  local -r tag=$(generate_tag "${debian_version}")
  local -r image_name=$(generate_image_name "${ruby_version}" "${tag}")
  echo_image_name_and_exit_if_requested "${show_image_name}" "${image_name}"
  exit_if_image_exists "${image_name}"
  build_container=$(create_container "${parent_image}")
  install_dependencies "${build_container}"
  install_ruby_install "${build_container}" "${RUBY_INSTALL_VERSION}"
  prevent_ruby_documentation_generation "${build_container}"
  install_ruby "${build_container}" "${ruby_version}"
  remove_dependencies "${build_container}"
  build_container_mount=$(mount_container "${build_container}")
  main_container=$(create_container "${parent_image}")
  main_container_mount=$(mount_container "${main_container}")
  copy_ruby "${build_container_mount}" "${main_container_mount}"
  configure_image_metadata "${main_container}" "${tag}"
  commit_container "${main_container}" "${image_name}"
}

main "$@"
